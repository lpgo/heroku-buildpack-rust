#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -e
set -o pipefail

# Build related variables.
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
RUSTUP_URL="https://static.rust-lang.org/rustup.sh"

# Remove any possible trade of a `target/` dir from a potential earlier build or mistake.
rm -rf $BUILD_DIR/target

# Setup ENV
# From Heroku's suggested docs.
export_env_dir() {
  local env_dir=$1
  if [ -d "$env_dir" ]; then
    local whitelist_regex=${2:-''}
    local blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
    if [ -d "$env_dir" ]; then
      for e in $(ls $env_dir); do
        echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
        export "$e=$(cat $env_dir/$e)"
        :
      done
    fi
  fi
}
export_env_dir "$ENV_DIR"

# Buildpack related env.
export PATH="$PATH:$CACHE_DIR/rust/bin"
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$CACHE_DIR/rust/lib"

# Log Function
log() {
    echo "------> $1"
}

# Installs the appropriate version of Rust based on channel.
install_rustc() {
    RUSTUP="$CACHE_DIR/rustup --disable-sudo --prefix=\"$CACHE_DIR/rust\" --yes"
    if [[ $RUSTC_CHANNEL = "stable" ]]; then
        if [[ -z "$RUSTC_REVISION" ]]; then
            log "Installing latest Rust $RUSTC_CHANNEL."
            $RUSTUP --channel="$RUSTC_CHANNEL" &> /dev/null
        else
            log "Installing Rust revision $RUSTC_REVISION."
            $RUSTUP --revision="$RUSTC_REVISION" &> /dev/null
        fi
    elif [[ $RUSTC_CHANNEL = "beta" || $RUSTC_CHANNEL = "nightly" ]]; then
        if [[ -z "$RUSTC_DATE" ]]; then
            log "Installing latest Rust $RUSTC_CHANNEL."
            $RUSTUP --channel="$RUSTC_CHANNEL" &> /dev/null
        else
            log "Installing Rust from $RUSTC_DATE."
            $RUSTUP --channel="$RUSTC_CHANNEL" --date="$RUSTC_DATE" &> /dev/null
        fi
    else
        log "Undefined Rust channel."
        exit 1
    fi
}

uninstall_rustc() {
    rm -rf $CACHE_DIR/rust
    rm -rf $CACHE_DIR/cargo
}

# Sometimes the directory doesn't exist.
mkdir -p "$CACHE_DIR"

# See if we already have Rustup.
if [[ ! -f "$CACHE_DIR/rustup" ]]; then
    log "Installing Rustup."
    # Get Rustup, install.
    curl $RUSTUP_URL > "$CACHE_DIR/rustup" 2> /dev/null
    chmod +x "$CACHE_DIR/rustup"
else
    log "Pre-cached Rustup."
fi;

# Make sure the channel is defined, else choose a sane default.
if [ -z "$RUSTC_CHANNEL" ]; then
    export RUSTC_CHANNEL="nightly"
    log "Using \$RUSTC_CHANNEL as $RUSTC_CHANNEL (default)."
else
    log "Using \$RUSTC_CHANNEL as $RUSTC_CHANNEL."
fi

# See if we already have Rust & Friends.
if [ ! -f "$CACHE_DIR/rust/bin/rustc" ]; then
    log "No cached Rust detected."
    install_rustc
else
    log "Cached Rust detected, checking..."
    # We may have an out of date version of Rust. Detect it.

    # Stable uses standard version releases.
    if [ "$RUSTC_CHANNEL" = "stable" ]; then
        CURR_RUSTC_REVISION="$(rustc --version | grep -ohE "[0-9]+\.[0-9]+\.[0-9]+")"
        # The revision is not specified, just make sure it's updated.
        if [ -z "$RUSTC_REVISION" ]; then
            log "Rust revision not specified, installing newest stable."
            # Need to find out if we're up to date.
            NEW_RUSTC_REVISION="$(/usr/bin/curl https://static.rust-lang.org/dist/channel-rust-stable | grep -ohE -m 1 "[0-9]+\.[0-9]+\.[0-9]+")"
            if [ "$CURR_RUSTC_REVISION" != "$NEW_RUSTC_REVISION" ]; then
                log "Rust revision $CURR_RUSTC_REVISION is out of date, upgrading to $NEW_RUSTC_REVISION."
                uninstall_rustc
                install_rustc
            else
                log "Pre-cached Rust."
            fi
        # The revision is specified, make sure it's correct or install it.
        elif [ "$RUSTC_REVISION" != "$CURR_RUSTC_REVISION" ]; then
            log "Rust revision not what is specified by \$RUSTC_REVISION."
            uninstall_rustc
            install_rustc
        # We already have a rust that's in date.
        else
            log "Pre-cached Rust."
        fi;

    # Beta and Nightly use dates.
    else
        CURR_RUSTC_DATE="$(rustc --version | grep -ohE "[0-9]{4}-[0-9]{2}-[0-9]{2}")"

        # Already have a defined and correct date, means we're done.
        if [ -z "$RUSTC_DATE" ] && [ "$RUSTC_DATE" = "$CURR_RUSTC_DATE" ]; then
            log "Pre-cached Rust (date $CURR_RUSTC_DATE)."
        # Need to check we have the latest.
        else
            CURR_RUSTC_HASH="$(rustc --version | grep -ohE "\w{9}")" # Might need refining.
            NEW_RUSTC_HASH="$(curl -s https://doc.rust-lang.org/$RUSTC_CHANNEL/index.html | grep -hE "class=\"hash" | grep -ohE "\w{9}")"
            # We're not up to date, install a new copy.
            if [ "$CURR_RUSTC_HASH" != "$NEW_RUSTC_HASH" ]; then
                log "Rust ($RUSTC_CHANNEL $CURR_RUSTC_HASH) is out of date, upgrading to $NEW_RUSTC_HASH."
                uninstall_rustc
                install_rustc
            # We're up to date!
            else
                log "Pre-cached up-to-date Rust."
            fi
        fi
    fi
fi

log "Compiling Application."
# Build the Rust app
$CACHE_DIR/rust/bin/rustc -V
cd "$BUILD_DIR"
CARGO_HOME="$CACHE_DIR/cargo" cargo build --release
